package com.tky.lte.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tky.lte.ui.entity.CallJilEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_JIL_ENTITY".
*/
public class CallJilEntityDao extends AbstractDao<CallJilEntity, Long> {

    public static final String TABLENAME = "CALL_JIL_ENTITY";

    /**
     * Properties of entity CallJilEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FunNumberName = new Property(1, String.class, "funNumberName", false, "FUN_NUMBER_NAME");
        public final static Property FunNumber = new Property(2, String.class, "funNumber", false, "FUN_NUMBER");
        public final static Property PeerNumber = new Property(3, String.class, "peerNumber", false, "PEER_NUMBER");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Call_way = new Property(5, int.class, "call_way", false, "CALL_WAY");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property CallType = new Property(7, int.class, "callType", false, "CALL_TYPE");
    }


    public CallJilEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CallJilEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_JIL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FUN_NUMBER_NAME\" TEXT," + // 1: funNumberName
                "\"FUN_NUMBER\" TEXT," + // 2: funNumber
                "\"PEER_NUMBER\" TEXT," + // 3: peerNumber
                "\"DATE\" TEXT," + // 4: date
                "\"CALL_WAY\" INTEGER NOT NULL ," + // 5: call_way
                "\"STATUS\" TEXT," + // 6: status
                "\"CALL_TYPE\" INTEGER NOT NULL );"); // 7: callType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_JIL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallJilEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String funNumberName = entity.getFunNumberName();
        if (funNumberName != null) {
            stmt.bindString(2, funNumberName);
        }
 
        String funNumber = entity.getFunNumber();
        if (funNumber != null) {
            stmt.bindString(3, funNumber);
        }
 
        String peerNumber = entity.getPeerNumber();
        if (peerNumber != null) {
            stmt.bindString(4, peerNumber);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
        stmt.bindLong(6, entity.getCall_way());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
        stmt.bindLong(8, entity.getCallType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallJilEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String funNumberName = entity.getFunNumberName();
        if (funNumberName != null) {
            stmt.bindString(2, funNumberName);
        }
 
        String funNumber = entity.getFunNumber();
        if (funNumber != null) {
            stmt.bindString(3, funNumber);
        }
 
        String peerNumber = entity.getPeerNumber();
        if (peerNumber != null) {
            stmt.bindString(4, peerNumber);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
        stmt.bindLong(6, entity.getCall_way());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
        stmt.bindLong(8, entity.getCallType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CallJilEntity readEntity(Cursor cursor, int offset) {
        CallJilEntity entity = new CallJilEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // funNumberName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // funNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // peerNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.getInt(offset + 5), // call_way
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.getInt(offset + 7) // callType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallJilEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFunNumberName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFunNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPeerNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCall_way(cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCallType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CallJilEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CallJilEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallJilEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
